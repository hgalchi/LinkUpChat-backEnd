plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.2'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'jacoco'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {

	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'


	// validation
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation', version: '3.2.1'

	//log
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-log4j2', version: '2.7.9'

	// jwt
	implementation 'io.jsonwebtoken:jjwt:0.12.6'

	//security
	implementation 'org.springframework.boot:spring-boot-starter-security'

	//websocket
	implementation 'org.springframework.boot:spring-boot-starter-websocket'

	//websocket-security
	implementation 'org.springframework.security:spring-security-messaging:6.1.2'

	// postgres
	implementation 'org.postgresql:postgresql:42.6.0'

	// mongo
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'

	// redis
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'

	//test
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework:spring-test:6.1.0'
	testImplementation 'org.mockito:mockito-core:5.8.0'
	testImplementation 'org.springframework.security:spring-security-test'

	//testContainers
	testImplementation "org.junit.jupiter:junit-jupiter:5.8.1"
	testImplementation "org.testcontainers:junit-jupiter:1.20.5"
	testImplementation "org.testcontainers:testcontainers:1.20.5"
	testImplementation 'org.springframework.boot:spring-boot-testcontainers'

	//testContainer-postgres
	testImplementation 'org.testcontainers:postgresql:1.20.4'

	//testContainer-redis
	implementation 'com.redis.testcontainers:testcontainers:1.15.3'

	//testContainer-mongodb
	testImplementation 'org.testcontainers:mongodb:1.20.4'


}


tasks.named('test') {
	useJUnitPlatform()
	finalizedBy 'jacocoTestReport'  // gradle test 실행시에 jacoco 실행
}

// jacoco 정보
jacoco {
	toolVersion = "0.8.11"
	layout.buildDirectory.dir("reports/jacoco")
}


jacocoTestReport {
	dependsOn test

	reports {
		xml.required = false    // xml 파일 저장 X
		csv.required = false    // csv 파일 저장 X
		html.required = true
	}

	afterEvaluate{
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					'**/common/**',
					'**/constant/**',
					'**/infrastructor/**',
					'**/dto/**',
					'**/event/**',
					'**/handler/**',
					'**/*Application*',
			])
		}))
	}

	//finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			enabled = true // 활성화
			element = 'CLASS' // 클래스 단위로 커버리지 체크
			// includes = []

			// 라인 커버리지 제한을 80%로 설정
			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0.80
			}

			// 브랜치 커버리지 제한을 80%로 설정
			limit {
				counter = 'BRANCH'
				value = 'COVEREDRATIO'
				minimum = 0.80
			}

			excludes = [
					'LinkUpTalk.**.common.*',
					'LinkUpTalk.**.constant.*',
					'LinkUpTalk.**.infrastructor.*',
					'LinkUpTalk.**.dto.*',
					'LinkUpTalk.**.event.*',
					'LinkUpTalk.**.handler.*',
					'LinkUpTalk.**.*Application*'
			]
		}
	}
}


